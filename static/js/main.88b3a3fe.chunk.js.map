{"version":3,"sources":["components/StatisticCard/StatisticCard.jsx","components/StatisticTitle/StatisticTitle.jsx","components/FeedbackButton/FeedbackButton.jsx","components/Statistics/Statistics.jsx","components/Notification/Notification.jsx","App.js","index.js","components/Statistics/Statistics.module.css","components/FeedbackButton/FeedbackButton.module.css"],"names":["StatisticCard","children","prototype","PropTypes","node","isRequired","StatisticTitle","title","FeedbackButton","options","onIncrement","className","s","buttons","map","option","type","onClick","Statistics","good","neutral","bad","total","positivePercentage","ul","li","Notification","message","App","useState","setGood","setNeutral","setBad","countTotalFeedback","Math","round","countPositiveFeedbackPercentage","feedBack","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"oSAGA,SAASA,EAAT,GAAsC,IAAbC,EAAY,EAAZA,SAEvB,OAAO,kCAAUA,IAGJD,QAEfA,EAAcE,UAAY,CACxBD,SAAUE,IAAUC,KAAKC,YCHZC,MALf,YAAoC,IAAVC,EAAS,EAATA,MAExB,OAAO,6BAAKA,K,gBCcCC,MAff,YAAmD,IAAzBC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,YAIjC,OACE,qBAAKC,UAAWC,IAAEC,QAAlB,SACGJ,EAAQK,KAAI,SAAAC,GAAM,OACjB,wBAAqBC,KAAK,SAASC,QAAS,kBAAMP,EAAYK,IAA9D,SACGA,GADUA,S,gBCMNG,MAbf,YAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAE/C,OACE,qBAAIZ,UAAWC,IAAEY,GAAjB,UACE,qBAAIb,UAAWC,IAAEa,GAAjB,oBAA6BN,KAC7B,qBAAIR,UAAWC,IAAEa,GAAjB,uBAAgCL,KAChC,qBAAIT,UAAWC,IAAEa,GAAjB,mBAA4BJ,KAC5B,qBAAIV,UAAWC,IAAEa,GAAjB,oBAA6BH,KAC7B,qBAAIX,UAAWC,IAAEa,GAAjB,iCAA0CF,SCJjCG,MALf,YAAoC,IAAZC,EAAW,EAAXA,QAEtB,OAAO,6BAAKA,KCoECC,MA/Df,WACE,MAAwBC,mBAAS,GAAjC,mBAAOV,EAAP,KAAaW,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOT,EAAP,KAAgBW,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOR,EAAP,KAAYW,EAAZ,KAsBQC,EAAqB,SAACd,EAAMC,EAASC,GAAhB,OAAwBF,EAAOC,EAAUC,GAK9DC,EAAQW,EAAmBd,EAAMC,EAASC,GAC1CE,EAJgC,SAACJ,EAAMC,EAASC,GAAhB,OACtCa,KAAKC,MAAc,IAAPhB,EAAcc,EAAmBd,EAAMC,EAASC,IAGjCe,CACzBjB,EACAC,EACAC,GAGJ,OACI,qBAAKV,UAAU,MAAf,SACE,eAAC,EAAD,WACE,cAAC,EAAD,CAAgBJ,MAAM,0BACtB,cAAC,EAAD,CACAE,QAAS,CAAC,OAAQ,UAAW,OAC3BC,YAtCe,SAAA2B,GAEvB,OAAQA,GACF,IAAK,OACHP,GAAQ,SAAAX,GAAI,OAAIA,EAAO,KACvB,MAEF,IAAK,UACHY,GAAW,SAAAX,GAAO,OAAIA,EAAU,KAChC,MAEF,IAAK,MACHY,GAAO,SAAAX,GAAG,OAAIA,EAAM,SA4BtB,cAAC,EAAD,CAAgBd,MAAM,eACrB0B,EAAmBd,EAAMC,EAASC,GAAO,EACxC,cAAC,EAAD,CACEF,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,IAGtB,cAAC,EAAD,CAAcI,QAAQ,4BC3DlCW,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCT1BC,EAAOC,QAAU,CAAC,GAAK,uBAAuB,GAAK,yB,kBCAnDD,EAAOC,QAAU,CAAC,QAAU,gCAAgC,OAAS,kC","file":"static/js/main.88b3a3fe.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction StatisticCard({ children }) {\n\n  return <section>{children}</section>;\n}\n\nexport default StatisticCard;\n\nStatisticCard.prototype = {\n  children: PropTypes.node.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction StatisticTitle({ title }) {\n\n  return <h1>{title}</h1>;\n}\n\nexport default StatisticTitle;\n\nStatisticTitle.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from '../FeedbackButton/FeedbackButton.module.css';\n\nfunction FeedbackButton({ options, onIncrement }) {\n  // console.log(options)\n  // const buttons = Object.keys(options);\n  // console.log(Object.keys(options));\n  return (\n    <div className={s.buttons}>\n      {options.map(option => (\n        <button key={option} type=\"button\" onClick={() => onIncrement(option)}>\n          {option}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default FeedbackButton;\n\nFeedbackButton.propTypes = {\n  options: PropTypes.array.isRequired,\n  onIncrement: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from '../Statistics/Statistics.module.css';\n\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\n\n  return (\n    <ul className={s.ul}>\n      <li className={s.li}> good: {good}</li>\n      <li className={s.li}> neutral: {neutral}</li>\n      <li className={s.li}> bad: {bad}</li>\n      <li className={s.li}>total: {total}</li>\n      <li className={s.li}>positivePercentage: {positivePercentage}</li>\n    </ul>\n  );\n}\n\nexport default Statistics;\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Notification({ message }) {\n\n  return <h2>{message}</h2>;\n}\n\nexport default Notification;\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n","import './App.css';\nimport { useState } from 'react';\nimport StatisticCard from './components/StatisticCard/StatisticCard';\nimport StatisticTitle from './components/StatisticTitle/StatisticTitle';\nimport FeedbackButton from './components/FeedbackButton/FeedbackButton';\nimport Statistics from './components/Statistics/Statistics';\nimport Notification from './components/Notification/Notification';\n\nimport React from 'react'\n\nfunction App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n   const handleIncrement = feedBack => {\n    // console.log(feedBack);\n    switch (feedBack) {\n          case 'good':\n            setGood(good => good + 1);\n            break;\n\n          case 'neutral':\n            setNeutral(neutral => neutral + 1);\n            break;\n\n          case 'bad':\n            setBad(bad => bad + 1);\n            break;\n\n          default:\n            break;\n        }\n   };\n  \n    const countTotalFeedback = (good, neutral, bad) => good + neutral + bad;\n\n  const countPositiveFeedbackPercentage = (good, neutral, bad) =>\n    Math.round((good * 100) / countTotalFeedback(good, neutral, bad));\n  \n    const total = countTotalFeedback(good, neutral, bad);\n    const positivePercentage = countPositiveFeedbackPercentage(\n      good,\n      neutral,\n      bad,\n    );\n\n  return (\n      <div className=\"App\">\n        <StatisticCard>\n          <StatisticTitle title=\"Please leave feedback\" />\n          <FeedbackButton\n          options={['good', 'neutral', 'bad']}\n            onIncrement={handleIncrement}\n          />\n          <StatisticTitle title=\"Statistics\" />\n          {countTotalFeedback(good, neutral, bad) > 0 ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={total}\n              positivePercentage={positivePercentage}\n            />\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </StatisticCard>\n      </div>\n    );\n  \n}\n\nexport default App\n\n\n// export class App extends Component {\n//   state = {\n//     good: 0,\n//     neutral: 0,\n//     bad: 0,\n//   };\n\n//   handleIncrement = feedBack => {\n//     // console.log(feedBack);\n//     this.setState(prevState => ({\n//       [feedBack]: prevState[feedBack] + 1,\n//     }));\n//   };\n\n//   countTotalFeedback = (good, neutral, bad) => good + neutral + bad;\n\n//   countPositiveFeedbackPercentage = (good, neutral, bad) =>\n//     Math.round((good * 100) / this.countTotalFeedback(good, neutral, bad));\n\n//   render() {\n//     const { good, neutral, bad } = this.state;\n//     const total = this.countTotalFeedback(good, neutral, bad);\n//     const positivePercentage = this.countPositiveFeedbackPercentage(\n//       good,\n//       neutral,\n//       bad,\n//     );\n\n//     return (\n//       <div className=\"App\">\n//         <StatisticCard>\n//           <StatisticTitle title=\"Please leave feedback\" />\n//           <FeedbackButton\n//             options={this.state}\n//             onIncrement={this.handleIncrement}\n//           />\n//           <StatisticTitle title=\"Statistics\" />\n//           {this.countTotalFeedback(good, neutral, bad) > 0 ? (\n//             <Statistics\n//               good={good}\n//               neutral={neutral}\n//               bad={bad}\n//               total={total}\n//               positivePercentage={positivePercentage}\n//             />\n//           ) : (\n//             <Notification message=\"No feedback given\" />\n//           )}\n//         </StatisticCard>\n//       </div>\n//     );\n//   }\n// }\n\n// export default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'modern-normalize/modern-normalize.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"li\":\"Statistics_li__18fpc\",\"ul\":\"Statistics_ul__1fBJW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"FeedbackButton_buttons__wl5Ee\",\"button\":\"FeedbackButton_button__3t_P6\"};"],"sourceRoot":""}